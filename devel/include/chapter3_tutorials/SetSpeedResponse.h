// Generated by gencpp from file chapter3_tutorials/SetSpeedResponse.msg
// DO NOT EDIT!


#ifndef CHAPTER3_TUTORIALS_MESSAGE_SETSPEEDRESPONSE_H
#define CHAPTER3_TUTORIALS_MESSAGE_SETSPEEDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chapter3_tutorials
{
template <class ContainerAllocator>
struct SetSpeedResponse_
{
  typedef SetSpeedResponse_<ContainerAllocator> Type;

  SetSpeedResponse_()
    : previous_speed(0.0)
    , new_speed(0.0)
    , stalled(false)  {
    }
  SetSpeedResponse_(const ContainerAllocator& _alloc)
    : previous_speed(0.0)
    , new_speed(0.0)
    , stalled(false)  {
  (void)_alloc;
    }



   typedef float _previous_speed_type;
  _previous_speed_type previous_speed;

   typedef float _new_speed_type;
  _new_speed_type new_speed;

   typedef uint8_t _stalled_type;
  _stalled_type stalled;





  typedef boost::shared_ptr< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetSpeedResponse_

typedef ::chapter3_tutorials::SetSpeedResponse_<std::allocator<void> > SetSpeedResponse;

typedef boost::shared_ptr< ::chapter3_tutorials::SetSpeedResponse > SetSpeedResponsePtr;
typedef boost::shared_ptr< ::chapter3_tutorials::SetSpeedResponse const> SetSpeedResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace chapter3_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45b6e4a0b69c96c06231db93d740f980";
  }

  static const char* value(const ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45b6e4a0b69c96c0ULL;
  static const uint64_t static_value2 = 0x6231db93d740f980ULL;
};

template<class ContainerAllocator>
struct DataType< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chapter3_tutorials/SetSpeedResponse";
  }

  static const char* value(const ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 previous_speed\n\
float32 new_speed\n\
bool stalled\n\
\n\
";
  }

  static const char* value(const ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.previous_speed);
      stream.next(m.new_speed);
      stream.next(m.stalled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSpeedResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chapter3_tutorials::SetSpeedResponse_<ContainerAllocator>& v)
  {
    s << indent << "previous_speed: ";
    Printer<float>::stream(s, indent + "  ", v.previous_speed);
    s << indent << "new_speed: ";
    Printer<float>::stream(s, indent + "  ", v.new_speed);
    s << indent << "stalled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stalled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHAPTER3_TUTORIALS_MESSAGE_SETSPEEDRESPONSE_H
